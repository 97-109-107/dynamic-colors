#!/bin/bash
set -e

USAGE="Usage: dynamic-colors [help|cycle|init|list|switch <colorscheme>]"
HELP="\
dynamic-colors <command>

Basic commands:
  h,help                  print this help message
  u,cycle                 cycle through color schemes forwards
  d,cycledown             cycle through color schemes backwards
  e,edit [<colorscheme>]  edit <colorscheme> when given or launch editor
                          in colorschemes directory otherwise
  i,init                  (re)load last color scheme
  l,list                  list available colorschemes
  s,switch <colorscheme>  change terminal colors to <colorscheme>

Creating colorschemes:
  a,audit <colorscheme>   check <colorscheme> for undefined colors
  c,create <colorscheme>  create a new colorscheme from scratch
"

die () {
  echo >&2 "$*"
  exit 1
}

change_color () {
  case $1 in
  color*)
    send_osc 4 "${1#color};$2" ;;
  foreground)
    send_osc 10 "$2" ;;
  background)
    send_osc 11 "$2" ;;
  cursor)
    send_osc 12 "$2" ;;
  mouse_foreground)
    send_osc 13 "$2" ;;
  mouse_background)
    send_osc 14 "$2" ;;
  highlight)
    send_osc 17 "$2" ;;
  border)
    send_osc 708 "$2" ;;
  esac
}

send_escape_sequence () {
  escape_sequence="$1"

  # wrap escape sequence when within a TMUX session
  [ ! -z "$TMUX" ] && escape_sequence="${DSC}tmux;${ESC}${escape_sequence}${ESC}\\"

  printf "${escape_sequence}"
}

send_osc () {
  Ps=$1
  Pt=$2
  command="$OSC$Ps;$Pt$BEL"
  send_escape_sequence $command
}

ESC="\033"
BEL="\007"
DSC="${ESC}P"
OSC="${ESC}]"

colors=( background foreground cursor mouse_background mouse_foreground highlight border color0 color1 color2 color3 color4 color5 color6 color7 color8 color9 color10 color11 color12 color13 color14 color15 )
color_names=( black red green yellow blue magenta cyan white brblack brred brgreen bryellow brblue brmagenta brcyan brwhite )

if [ -z "${DYNAMIC_COLORS_ROOT}" ]; then
  DYNAMIC_COLORS_ROOT="${HOME}/.dynamic-colors"
else
  DYNAMIC_COLORS_ROOT="${DYNAMIC_COLORS_ROOT%/}"
fi

if [ -z "${DYNAMIC_COLORS_THEMES}" ]; then
  FOLDER="/colorschemes"
  DYNAMIC_COLORS_THEMES=$DYNAMIC_COLORS_ROOT$FOLDER
else
  DYNAMIC_COLORS_THEMES="${DYNAMIC_COLORS_THEMES%/}"
fi

write_colorscheme_name () {
  echo "$1" > "${DYNAMIC_COLORS_ROOT}/colorscheme"
}

load_colorscheme_name () {
  echo "$1" > "${DYNAMIC_COLORS_ROOT}/colorscheme"
}

init () {
  [ ! -f "$DYNAMIC_COLORS_THEMES" ] && return
  colorscheme_name=$(load_colorscheme_name)
  load_colorscheme "$colorscheme_name"
  set_colors
}

unset_colors () {
  for color in ${colors[@]}; do
    unset ${!color}
  done
}

set_colors () {
  for color in ${colors[@]}; do
    [[ ${!color} ]] && change_color "$color" "${!color}"
  done
}

load_colorscheme () {
  [ ! -f "$DYNAMIC_COLORS_THEMES/$1" ] && die "error: unknown colorscheme '$1'"

  colorschemeFile=`cat "$DYNAMIC_COLORS_THEMES/$1"`
  hexRegex="(\#\S{3,6})"
  groupRegex="(\w*)\:"

  printf %s "$colorschemeFile" | while IFS= read -r line
  do
     if [[ $line =~ $groupRegex ]]; then
       group="${BASH_REMATCH[1]}"
     fi
     if [[ $line =~ $hexRegex ]];then
       hex="${BASH_REMATCH[1]}"
     fi
     change_color $group $hex
  done
  # ."$COLORSCHEMES/$1.sh" # source colorscheme file
}

switch () {
  echo "told to move to $1"
  write_colorscheme_name "$1"
  load_colorscheme "$1"
  # set_colors
}

# TODO REMOVE
# audit () {
#   unset_colors
#   load_colorscheme "$1"
#   declare -a problems
#   for color in ${colors[@]}; do
#     if [ ! ${!color} ]; then
#       problems=( "${problems[@]}" "\033[4m$color\033[0m is not defined" )
#     fi
#   done
#   if [ ${#problems[@]} -ne 0 ]; then
#     echo >&2 "$1:"
#     for p in "${problems[@]}"
#     do
#       echo >&2 " * $p"
#     done
#     exit 1
#   fi
# }

cycle() {
  current=`head -1 "${DYNAMIC_COLORS_ROOT}/colorscheme"`
  found=false
  count=0
  allthemes=$(find $DYNAMIC_COLORS_THEMES -type f -printf '%f\n' | sort)
  allthemeslength=`echo "$allthemes" | wc -l`
  allthemeslength=$((allthemeslength - 1))
  firsttheme=`printf $allthemes | head -n 1`
  cd "$DYNAMIC_COLORS_THEMES"

  for file in $allthemes; do
    # echo "Currently using $current"
    # echo "Iterating over $file / $count / $allthemeslength"
    if [ $found = true ]; then
      switch "$file"
      return
    fi
    if [ $file = "${current}" ]; then
      found=true
      # echo "^ found match"
      if [ $count == $allthemeslength ];then
        # switch to first one
        # echo "First theme $firsttheme"
        switch "$firsttheme"
        return
      fi
    fi
    count=$((count + 1))
  done
}

cycledown() {
    if [ -f "$DYNAMIC_COLORS_THEMES" ]; then
        current=`head -1 "$DYNAMIC_COLORS_THEMES"`
        found=false
        cd "$DYNAMIC_COLORS_THEMES"
        for file in `ls -r *`; do
            if [ $found = true ]; then
                switch "${file%}"
                return
            fi
            if [ $file = "${current}.sh" ]; then
                found=true
            fi
        done
    fi

    cd "$DYNAMIC_COLORS_THEMES"
    for file in `ls -r *.sh`; do
        switch "${file%}"
        break
    done
}

list () {
  [ ! -d "$DYNAMIC_COLORS_THEMES" ] && die "error: colorschemes directory '$DYNAMIC_COLORS_THEMES' doesn't exist"
  cd "$DYNAMIC_COLORS_THEMES"
  for file in *; do
    echo "$file"
  done
}

# TODO remove
# edit () {
#   cd "$DYNAMIC_COLORS_THEMES"
#   if [ ${#@} -eq 0 ]; then
#     ${EDITOR:-/usr/bin/vim} .
#   else
#     ${EDITOR:-/usr/bin/vim} "${@/%/.sh}"
#   fi
# }

# TODO remove
# create () {
#   [ -f "$COLORSCHEMES/$1.sh" ] && die "error: colorscheme '$1' already exists"
#   output="# $1\n"
#   for color in ${colors[@]}; do
#     output+="\n$color=\"\""
#     [[ $color == color* ]] && output+=" # ${color_names[${color#color}]}"
#   done
#   cd "$COLORSCHEMES"
#   echo -e "$output" >> "$1.sh"
#   edit "$1"
# }

usage () {
  die "$USAGE"
}

help () {
  echo "$HELP"
}

case "$#" in
0)
  usage ;;
*)
  cmd="$1"
  shift
  case "$cmd" in
  h|help)
    help ;;
  a|audit)
    audit "$1" ;;
  c|create)
    [ $# -ne 1 ] && usage
    create "$1" ;;
  e|edit)
    edit "$@" ;;
  i|init)
    init ;;
  l|list)
    list ;;
  s|switch)
    [ $# -ne 1 ] && usage
    switch "$1" ;;
  u|cycle)
    cycle ;;
  d|cycledown)
    cycledown ;;
  *)
    usage ;;
  esac
esac
